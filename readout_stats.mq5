#property copyright "Generated by Grok"
#property link      "https://x.ai"
#property version   "1.00"
#property strict
#property script_show_inputs

// Input parameters if needed, but none for now

void OnStart()
{
    // Define symbols and timeframes
    string symbol_tsla = "TSLA";
    string symbol_ndx = "QQQ"; //invesco QQQ Trust as proxy for NDXUSD
    string symbol_nvda = "NVDA";
    ENUM_TIMEFRAMES tf_m1 = PERIOD_M1;
    ENUM_TIMEFRAMES tf_m5 = PERIOD_M5;

    // Define date range: September 2025
    datetime start_time = StringToTime("2024.10.15 00:00:00");
    datetime end_time = StringToTime("2025.09.30 23:59:59");

    // Common RSI period (default 14)
    int rsi_period = 14;

    // Stochastic parameters (updated: %K length=14, %K smoothing=1, %D smoothing=3)
    int stoch_k = 14;
    int stoch_d = 3;
    int stoch_slowing = 1;

    // Arrays for data
    datetime times[];
    double values[];

    // 1. RSI 1-minute TSLA -> 1mrsitesla.csv
    int handle_rsi_m1_tsla = iRSI(symbol_tsla, tf_m1, rsi_period, PRICE_CLOSE);
    if (handle_rsi_m1_tsla == INVALID_HANDLE) {
        Print("Failed to create RSI handle for TSLA M1");
        return;
    }
    int bars = CopyTime(symbol_tsla, tf_m1, start_time, end_time, times);
    if (bars <= 0) {
        Print("No bars copied for TSLA M1");
        IndicatorRelease(handle_rsi_m1_tsla);
        return;
    }
    int copied = CopyBuffer(handle_rsi_m1_tsla, 0, start_time, end_time, values);
    IndicatorRelease(handle_rsi_m1_tsla);
    if (copied != bars) {
        Print("Mismatch in copied RSI values for TSLA M1: ", copied, " vs ", bars);
        return;
    }
    WriteToCsv("1mrsitesla.csv", times, values, bars);

    // 2. RSI 5-minute TSLA -> 5mrsitesla.csv
    int handle_rsi_m5_tsla = iRSI(symbol_tsla, tf_m5, rsi_period, PRICE_CLOSE);
    if (handle_rsi_m5_tsla == INVALID_HANDLE) {
        Print("Failed to create RSI handle for TSLA M5");
        return;
    }
    bars = CopyTime(symbol_tsla, tf_m5, start_time, end_time, times);
    if (bars <= 0) {
        Print("No bars copied for TSLA M5");
        IndicatorRelease(handle_rsi_m5_tsla);
        return;
    }
    copied = CopyBuffer(handle_rsi_m5_tsla, 0, start_time, end_time, values);
    IndicatorRelease(handle_rsi_m5_tsla);
    if (copied != bars) {
        Print("Mismatch in copied RSI values for TSLA M5: ", copied, " vs ", bars);
        return;
    }
    WriteToCsv("5mrsitesla.csv", times, values, bars);

    // 3. RSI 1-minute NDXUSD -> 1mrsindxusd.csv
    int handle_rsi_m1_ndx = iRSI(symbol_ndx, tf_m1, rsi_period, PRICE_CLOSE);
    if (handle_rsi_m1_ndx == INVALID_HANDLE) {
        Print("Failed to create RSI handle for NDXUSD M1");
        return;
    }
    bars = CopyTime(symbol_ndx, tf_m1, start_time, end_time, times);
    if (bars <= 0) {
        Print("No bars copied for NDXUSD M1");
        IndicatorRelease(handle_rsi_m1_ndx);
        return;
    }
    copied = CopyBuffer(handle_rsi_m1_ndx, 0, start_time, end_time, values);
    IndicatorRelease(handle_rsi_m1_ndx);
    if (copied != bars) {
        Print("Mismatch in copied RSI values for NDXUSD M1: ", copied, " vs ", bars);
        return;
    }
    WriteToCsv("1mrsindxusd.csv", times, values, bars);

    // 4. Stochastic %K 1-minute TSLA -> 1mstochtsla.csv
    int handle_stoch_m1_tsla = iStochastic(symbol_tsla, tf_m1, stoch_k, stoch_d, stoch_slowing, MODE_SMA, STO_LOWHIGH);
    if (handle_stoch_m1_tsla == INVALID_HANDLE) {
        Print("Failed to create Stochastic handle for TSLA M1");
        return;
    }
    bars = CopyTime(symbol_tsla, tf_m1, start_time, end_time, times);
    if (bars <= 0) {
        Print("No bars copied for TSLA M1 (Stoch)");
        IndicatorRelease(handle_stoch_m1_tsla);
        return;
    }
    copied = CopyBuffer(handle_stoch_m1_tsla, 0, start_time, end_time, values); // Buffer 0 is %K
    IndicatorRelease(handle_stoch_m1_tsla);
    if (copied != bars) {
        Print("Mismatch in copied Stoch %K values for TSLA M1: ", copied, " vs ", bars);
        return;
    }
    WriteToCsv("1mstochtsla.csv", times, values, bars);

    // 5. 1-minute OHLC data for TSLA -> tesla_1m.csv
    MqlRates rates_tsla[];
    bars = CopyRates(symbol_tsla, tf_m1, start_time, end_time, rates_tsla);
    if (bars <= 0) {
        Print("No bars copied for TSLA M1 OHLC");
        return;
    }
    WriteRatesToCsv("tesla_1m.csv", rates_tsla, bars);

    // 6. 1-minute OHLC data for NVDA -> nvda_1m.csv
    MqlRates rates_nvda[];
    bars = CopyRates(symbol_nvda, tf_m1, start_time, end_time, rates_nvda);
    if (bars <= 0) {
        Print("No bars copied for NVDA M1 OHLC");
        return;
    }
    WriteRatesToCsv("nvda_1m.csv", rates_nvda, bars);

    Print("Script completed successfully.");
}

// Function to write to CSV (for single value indicators)
void WriteToCsv(string filename, datetime &times[], double &values[], int count)
{
    int file_handle = FileOpen(filename, FILE_WRITE | FILE_CSV | FILE_ANSI, ',');
    if (file_handle == INVALID_HANDLE) {
        Print("Failed to open file: ", filename);
        return;
    }

    // Write header
    FileWrite(file_handle, "Timestamp", "Value");

    // Write data
    for (int i = 0; i < count; i++) {
        string timestamp = TimeToString(times[i], TIME_DATE | TIME_MINUTES | TIME_SECONDS);
        FileWrite(file_handle, timestamp, DoubleToString(values[i], 2));
    }

    FileClose(file_handle);
    Print("Wrote ", count, " lines to ", filename);
}

// Function to write rates to CSV (for OHLC data)
void WriteRatesToCsv(string filename, MqlRates &rates[], int count)
{
    int file_handle = FileOpen(filename, FILE_WRITE | FILE_CSV | FILE_ANSI, ',');
    if (file_handle == INVALID_HANDLE) {
        Print("Failed to open file: ", filename);
        return;
    }

    // Write header
    FileWrite(file_handle, "Timestamp", "Open", "High", "Low", "Close", "TickVolume", "Spread", "RealVolume");

    // Write data
    for (int i = 0; i < count; i++) {
        string timestamp = TimeToString(rates[i].time, TIME_DATE | TIME_MINUTES | TIME_SECONDS);
        FileWrite(file_handle, timestamp, 
                  DoubleToString(rates[i].open, 2), 
                  DoubleToString(rates[i].high, 2), 
                  DoubleToString(rates[i].low, 2), 
                  DoubleToString(rates[i].close, 2), 
                  rates[i].tick_volume, 
                  rates[i].spread, 
                  rates[i].real_volume);
    }

    FileClose(file_handle);
    Print("Wrote ", count, " lines to ", filename);
}